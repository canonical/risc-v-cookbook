.. SPDX-License-Identifier: CC-BY-SA-4.0

Packaging Binaries as .deb
==========================

To package binaries produced by source code as a `.deb` file, the build system must be adapted
to generate a `.deb` instead of raw binaries. This is achieved by using a Debian build tool,
such as `dpkg-buildpackage`, to build the source code instead of the original build system.

The `dpkg-buildpackage` tool acts as a wrapper around the original build system and relies on
a `debian/` folder in the root directory of the source code. This folder contains metadata and
configuration files required to produce `.deb` files. These tools utilize this information to
organize the binaries generated by the original build system into one or more `.deb` files in
a standardized format.

Steps to Package Binaries as `.deb`
-----------------------------------

1. **Download the upstream source as a tarball:**

   .. code:: bash

      wget http://www.example.org/download/debhello-0.0.tar.gz

2. **Rename the tarball:**

   Rename it to `<source_package>_<upstream_version>.orig.tar.gz` (e.g., `debhello_0.0.orig.tar.gz`).

3. **Untar the tarball:**

   .. code:: bash

      tar -xzmf debhello_0.0.orig.tar.gz

4. **Rename the untarred directory:**

   Rename it to `<source_package>-<upstream_version>` (e.g., `debhello-0.0`).

5. **Install `debmake`:**

   Install the `debmake` tool

   .. code:: bash

      sudo apt install debmake

6. **Generate the `debian/` folder:**

   Switch to the directory (e.g., `debhello-0.0`) and run `debmake`, this will create the `debian/` folder

   .. code:: bash

      cd debhello-0.0
      debmake

7. **Customize the `debian/` folder:**

   The `debian/` directory must now include templates for essential files. Among those are:

   - **debian/control**: Metadata about the package, such as its name, section, description, dependencies,
     and maintainer. See the `Debian Policy Manual: Control Files 
     <https://www.debian.org/doc/debian-policy/ch-controlfields.html#debian-source-package-template-control-files-debian-control>`_
     for detailed information.

   - **debian/copyright**: Copyright details of the package. By default, `debmake` creates it in the
     `DEP-5 format <https://www.debian.org/doc/packaging-manuals/copyright-format/1.0/>`_.

   - **debian/rules**: A Makefile-style script specifying how to build the package. For more details, see
     :ref:`customizing_debian_rules`.

   - **debian/changelog**: History of changes to the package. This can be edited manually or with the
     `dch` tool. After installation, it is stored at `/usr/share/doc/<package>/changelog.Debian.gz`.

   Customize the above files and remove unused ones to match your package requirements. A minimal `debian/` could look like

      .. code-block:: none

        debian/
        ├── changelog
        ├── control
        ├── copyright
        ├── gbp.conf
        ├── rules*
        ├── source/
        │   └── format
        ├── tests/
        │   └── control
        └── watch

8. **Build the package:**

   Run the following commands to build the package locally:

   .. code:: bash

      dpkg-buildpackage

   To skip signing the package, use:

   .. code:: bash

      dpkg-buildpackage -us -uc

   For instructions on building for a PPA, see :doc:`Upload to a PPA <../launchpad/upload_ppa>` instead.

.. _customizing_debian_rules:

Customizing `debian/rules`
--------------------------

The `dpkg-buildpackage` command uses the `debian/rules` file to build `.deb` packages. This
file can be as simple as:

.. code-block:: makefile

   #!/usr/bin/make -f
   #export DH_VERBOSE = 1

   %:
       dh $@

The `dh` commands belong to the `debhelper` suite, which automates common packaging tasks.
For more information, see the `debhelper manual
<https://manpages.debian.org/testing/debhelper/debhelper.7.en.html>`_. Debhelper attempts to
detect the build system (e.g., Autotools, CMake, Python `setup.py`, etc.) based on source files
and configures the build steps accordingly.

If autodetection fails, specific steps can be overridden in `debian/rules`, e.g.:

  .. code-block:: makefile

      override_dh_auto_configure:
          ./configure --prefix=/usr --enable-feature

      override_dh_auto_build:
          make -j4
